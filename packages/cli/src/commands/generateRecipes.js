'use strict';

const fastGlob = require('fast-glob');
const fs = require('fs');
const ohm = require('ohm-js');

const {generateTypes} = require('../helpers/generateTypes');

class Plan {
  constructor() {
    this.plan = {filesToWrite: Object.create(null)};
  }

  write(filename, contents) {
    this.plan.filesToWrite[filename] = contents;
  }
}

const defaultWriter = {
  write(filename, contents) {
    fs.writeFileSync(filename, contents);
  }
};

const createBanner = (filename = undefined) =>
  `// AUTOGENERATED FILE
// This file was generated${
    filename ? ` from ${filename}` : ''
} by 'generate-ohm-declarations'.`;

function generateRecipes(patterns, opts) {
  const {dryRun, cwd, withTypes} = opts;
  const plan = new Plan();
  const writer = dryRun ? plan : defaultWriter;

  for (const sourceFilename of fastGlob.sync(patterns, {cwd})) {
    const sourcePath = cwd ? path.join(cwd, sourceFilename) : sourceFilename;
    const grammarSource = fs.readFileSync(sourcePath, 'utf-8');
    const grammar = ohm.grammar(grammarSource);

    generateRecipe(sourcePath, grammar, writer);
    if (withTypes) {
      generateTypesWithWriter(sourcePath, grammar, writer);
    }
  }

  return plan.plan;
}

function generateRecipe(grammarFilename, grammar, writer) {
  const outputFilename = `${grammarFilename}.js`;
  writer.write(
      outputFilename,
      `module.exports = require('ohm-js').makeRecipe('${grammar.toRecipe()});`
  );
}

function generateTypesWithWriter(grammarFilename, grammar, writer) {
  const {filename, contents} = generateTypes(grammarFilename, grammar);

  const fullContents = [createBanner(grammarFilename), '', contents].join('\n');
  writer.write(filename, fullContents);
}

module.exports = {
  command: 'generateRecipes <patterns...>',
  description: 'generate standalone modules (aka "recipes") from .ohm files',
  options: [['-t, --withTypes', 'generate a corresponding .d.ts file for TypeScript']],
  action: generateRecipes
};
