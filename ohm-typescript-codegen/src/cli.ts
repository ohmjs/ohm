import fastGlob from 'fast-glob';
import fs from 'fs';
import minimist from 'minimist';
import path from 'path';

import {generateTypings} from './generateTypings';

export interface Options extends Omit<minimist.ParsedArgs, '_'> {
  cwd?: string;
  dryRun?: boolean;
}

class Plan {
  plan = {filesToWrite: Object.create(null) as {[filename: string]: string}};

  write(filename: string, contents: string): void {
    this.plan.filesToWrite[filename] = contents;
  }
}

const defaultWriter = {
  write(filename: string, contents: string): void {
    fs.writeFileSync(filename, contents);
  }
};

const createBanner = (filename?: string) =>
  `// AUTOGENERATED FILE
// This file was generated${
    filename ? ` from ${filename}` : ''
  } by 'generate-ohm-declarations'.`;

export function main(patterns: string[], {cwd, dryRun, _isBuiltInRules}: Options) {
  const plan = new Plan();
  const writer = dryRun ? plan : defaultWriter;

  for (const sourceFilename of fastGlob.sync(patterns, {cwd})) {
    const sourcePath = cwd ? path.join(cwd, sourceFilename) : sourceFilename;
    const grammarSource = fs.readFileSync(sourcePath, 'utf-8');
    const {filename, contents} = generateTypings(grammarSource, sourceFilename);

    const fullContents = [createBanner(sourceFilename), '', contents].join('\n');
    writer.write(`${sourceFilename}.d.ts`, fullContents);
  }

  return plan.plan;
}

const {_: patterns, ...options} = minimist(process.argv.slice(2), {'--': false});
main(patterns, options);
