{
  "reservedWords": [
    "Keyword",
    "FutureReservedWord",
    "NullLiteral",
    "BooleanLiteral"
  ],
  "substitutions": [
    {
      "name": "unicodeIDStart",
      "override": "letter /* fixme */"
    },
    {
      "name": "unicodeIDContinue",
      "override": "letter | digit /* fixme */"
    },
    {
      "name": "sourceCharacter",
      "override": "any"
    },
    {
      "name": "postAsteriskCommentChars",
      "pattern": "| \"*\" postAsteriskCommentChars?",
      "replacement": "| \"*\" ~\"/\" postAsteriskCommentChars?"
    },
    {
      "name": "LeftHandSideExpression",
      "pattern": "| NewExpression<guardYield>\n    | CallExpression<guardYield>",
      "replacement": "| CallExpression<guardYield>\n    | NewExpression<guardYield>"
    },
    {
      "_comment_": " MethodDefinition must come before IdentifierReference.",
      "name": "PropertyDefinition",
      "pattern": "| IdentifierReference<guardYield> -- alt1\n    | CoverInitializedName<guardYield> -- alt2\n    | PropertyName<guardYield> \":\" AssignmentExpression<withIn, guardYield> -- alt3\n    | MethodDefinition<guardYield> -- alt4",
      "replacement": "| MethodDefinition<guardYield> -- alt4\n    | PropertyName<guardYield> \":\" AssignmentExpression<withIn, guardYield> -- alt3\n    | IdentifierReference<guardYield> -- alt1\n    | CoverInitializedName<guardYield> -- alt2"
    },
    {
      "_comment_": " Need this rather than `#sc` so that EmptyStatement is not nullable.",
      "name": "EmptyStatement",
      "override": "\";\" // note: this semicolon eats newlines"
    },
    {
      "_comment_": " ArrowFunction must come before ConditionalExpression, because the arrow function parameters will parse as a parenthesized expression. Both LeftHandSideExpression alternatives must also come before ConditionalExpression.",
      "name": "AssignmentExpression",
      "pattern": "| ConditionalExpression<guardIn, guardYield> -- alt1\n    | guardYield YieldExpression<guardIn> -- alt2\n    | ArrowFunction<guardIn, guardYield> -- alt3\n    | LeftHandSideExpression<guardYield> \"=\" AssignmentExpression<guardIn, guardYield> -- alt4\n    | LeftHandSideExpression<guardYield> AssignmentOperator AssignmentExpression<guardIn, guardYield> -- alt5",
      "replacement": "| ArrowFunction<guardIn, guardYield> -- alt3\n    | LeftHandSideExpression<guardYield> \"=\" AssignmentExpression<guardIn, guardYield> -- alt4\n    | LeftHandSideExpression<guardYield> AssignmentOperator AssignmentExpression<guardIn, guardYield> -- alt5\n    | ConditionalExpression<guardIn, guardYield> -- alt1\n    | guardYield YieldExpression<guardIn> -- alt2"
    },
    {
      "name": "FormalParameters",
      "pattern": "| /* empty */ -- alt1\n    | FormalParameterList<guardYield> -- alt2",
      "replacement": "| FormalParameterList<guardYield> -- alt2\n    | /* empty */ -- alt1"
    },
    {
      "_comment_": " The recursive MemberExpression application must come before PrimaryExpression.",
      "name": "MemberExpression",
      "pattern": "| PrimaryExpression<guardYield> -- alt1\n    | SuperProperty<guardYield> -- alt5\n    | MetaProperty -- alt6\n    | new MemberExpression<guardYield> Arguments<guardYield> -- alt7",
      "replacement": "| new MemberExpression<guardYield> Arguments<guardYield> -- alt7\n    | PrimaryExpression<guardYield> -- alt1\n    | SuperProperty<guardYield> -- alt5\n    | MetaProperty -- alt6"
    },
    {
      "_comment_": " Move PostfixExpression to the very end.",
      "name": "UnaryExpression",
      "pattern": "    | PostfixExpression<guardYield> -- alt1\n",
      "postlude": "\n    | PostfixExpression<guardYield> -- alt1",
      "replacement": ""
    },
    {
      "_comment_": " The first alternative is a subset of the second one, so flip the order.",
      "name": "ConditionalExpression",
      "pattern": "| LogicalORExpression<guardIn, guardYield> -- alt1\n    | LogicalORExpression<guardIn, guardYield> \"?\" AssignmentExpression<withIn, guardYield> \":\" AssignmentExpression<guardIn, guardYield> -- alt2",
      "replacement": "| LogicalORExpression<guardIn, guardYield> \"?\" AssignmentExpression<withIn, guardYield> \":\" AssignmentExpression<guardIn, guardYield> -- alt2\n    | LogicalORExpression<guardIn, guardYield> -- alt1"
    },
    {
      "_comment_": " First, put move the left recursive application above the ShiftExpression. (It's not properly recognized as left recursive due to the `guardIn`. Then, move the `guardIn` to be right before the `'in'` terminal.",
      "name": "RelationalExpression",
      "pattern": "| ShiftExpression<guardYield> -- alt1\n    | guardIn RelationalExpression<withIn, guardYield> in ShiftExpression<guardYield> -- alt7",
      "replacement": "| RelationalExpression<withIn, guardYield> guardIn in ShiftExpression<guardYield> -- alt7\n    | ShiftExpression<guardYield> -- alt1"
    },
    {
      "_comment_": " FIXME: Make sure these produce something useful.",
      "name": "identifierPart",
      "pattern": "| \"\" /* FIXME <ZWNJ> */ -- alt5\n    | \"\" /* FIXME <ZWJ> */ -- alt6",
      "replacement": ""
    },
    {
      "_comment_": " Move decimalLiteral to the very end.",
      "name": "numericLiteral",
      "pattern": "    | decimalLiteral\n",
      "postlude": "\n    | decimalLiteral",
      "replacement": ""
    },
    {
      "_comment_": " alt2 is strictly a subset of alt3, so swap the order.",
      "name": "FormalParameterList",
      "pattern": "| FormalsList<guardYield> -- alt2\n    | FormalsList<guardYield> \",\" FunctionRestParameter<guardYield> -- alt3",
      "replacement": "| FormalsList<guardYield> \",\" FunctionRestParameter<guardYield> -- alt3\n    | FormalsList<guardYield> -- alt2"
    },
    {
      "_comment_": " alt1 is strictly a subset of the following two alternatives, so put it at the end.",
      "name": "PostfixExpression",
      "pattern": "| LeftHandSideExpression<guardYield> -- alt1\n    | LeftHandSideExpression<guardYield> ~lineTerminator \"++\" -- alt2\n    | LeftHandSideExpression<guardYield> ~lineTerminator \"--\" -- alt3",
      "replacement": "| LeftHandSideExpression<guardYield> ~lineTerminator \"++\" -- alt2\n    | LeftHandSideExpression<guardYield> ~lineTerminator \"--\" -- alt3\n    | LeftHandSideExpression<guardYield> -- alt1"
    },
    {
      "_comment_": " Change from recursive to iterative.",
      "name": "StatementList",
      "pattern": "| StatementList<guardYield, guardReturn> StatementListItem<guardYield, guardReturn> -- alt2\n    | StatementListItem<guardYield, guardReturn> -- alt1",
      "replacement": "| StatementListItem<guardYield, guardReturn>+"
    },
    {
      "_comment_": " Change from recursive to iterative.",
      "name": "StatementList",
      "pattern": "| StatementList<guardYield, guardReturn> StatementListItem<guardYield, guardReturn> -- alt2\n    | StatementListItem<guardYield, guardReturn> -- alt1",
      "replacement": "| StatementListItem<guardYield, guardReturn>+"
    },
    {
      "_comment_": " Change from recursive to iterative.",
      "name": "ModuleItemList",
      "pattern": "| ModuleItemList ModuleItem -- alt2\n    | ModuleItem -- alt1",
      "replacement": "| ModuleItem+"
    },
    {
      "_comment_": " Change from recursive to iterative.",
      "name": "singleLineCommentChars",
      "pattern": "| singleLineCommentChar singleLineCommentChars? -- alt1",
      "replacement": "| singleLineCommentChar+"
    },
    {
      "_comment_": " Change from recursive to iterative.",
      "name": "doubleStringCharacters",
      "pattern": "| doubleStringCharacter doubleStringCharacters? -- alt1",
      "replacement": "| doubleStringCharacter+"
    },
    {
      "_comment_": " Change from recursive to iterative.",
      "name": "singleStringCharacters",
      "pattern": "| singleStringCharacter singleStringCharacters? -- alt1",
      "replacement": "| singleStringCharacter+"
    },
    {
      "_comment_": " Change from recursive to iterative.",
      "name": "templateCharacters",
      "pattern": "| templateCharacter templateCharacters? -- alt1",
      "replacement": "| templateCharacter+"
    },
    {
      "_comment_": " Change from recursive to iterative.",
      "name": "multiLineCommentChars",
      "pattern": "| multiLineNotAsteriskChar multiLineCommentChars? -- alt1\n    | \"*\" postAsteriskCommentChars? -- alt2",
      "replacement": "(~\"*/\" sourceCharacter)*"
    }
  ]
}
