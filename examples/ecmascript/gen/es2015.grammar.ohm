ES2015 {

  Start = Script

  // Override Ohm's built-in definition of space.
  space := whiteSpace | lineTerminator | comment

  unicodeZs = "\xA0" | "\u1680" | "\u2000".."\u200A" | "\u202F" | "\u205F" | "\u3000"

  multiLineCommentNoNL = "/*" (~("*/" | lineTerminator) sourceCharacter)* "*/"

  // does not accept lineTerminators, not even implicit ones in a multiLineComment (cf. section 7.4)
  spacesNoNL = (whiteSpace | singleLineComment | multiLineCommentNoNL)*

  // A semicolon is "automatically inserted" if a newline or the end of the input stream is
  // reached, or the offending token is "}".
  // See https://es5.github.io/#x7.9 for more information.
  // NOTE: Applications of this rule *must* appear in a lexical context -- either in the body of a
  // lexical rule, or inside '#()'.
  sc = space* (";" | end)
     | spacesNoNL (lineTerminator | ~multiLineCommentNoNL multiLineComment | &"}")

  sourceCharacter = any

  inputElementDiv = 
    | whiteSpace
    | lineTerminator
    | comment
    | commonToken
    | divPunctuator
    | rightBracePunctuator

  inputElementRegExp = 
    | whiteSpace
    | lineTerminator
    | comment
    | commonToken
    | rightBracePunctuator
    | regularExpressionLiteral

  inputElementRegExpOrTemplateTail = 
    | whiteSpace
    | lineTerminator
    | comment
    | commonToken
    | regularExpressionLiteral
    | templateSubstitutionTail

  inputElementTemplateTail = 
    | whiteSpace
    | lineTerminator
    | comment
    | commonToken
    | divPunctuator
    | templateSubstitutionTail

  whiteSpace = 
    | "\t"
    | "\x0B"
    | "\x0C"
    | " "
    | "\xA0"
    | "\uFEFF"
    | unicodeZs

  lineTerminator = 
    | "\n"
    | "\r"
    | "\u2028"
    | "\u2029"

  lineTerminatorSequence = 
    | "\n" -- alt1
    | "\r" ~"\n" -- alt2
    | "\u2028" -- alt3
    | "\u2029" -- alt4
    | "\r" "\n" -- alt5

  comment = 
    | multiLineComment
    | singleLineComment

  multiLineComment = 
    | "/*" multiLineCommentChars? "*/" -- alt1

  multiLineCommentChars = 
    (~"*/" sourceCharacter)*

  postAsteriskCommentChars = 
    | multiLineNotForwardSlashOrAsteriskChar multiLineCommentChars? -- alt1
    | "*" ~"/" postAsteriskCommentChars? -- alt2

  multiLineNotAsteriskChar = 
    | ~"*" sourceCharacter

  multiLineNotForwardSlashOrAsteriskChar = 
    | ~("/" | "*") sourceCharacter

  singleLineComment = 
    | "//" singleLineCommentChars? -- alt1

  singleLineCommentChars = 
    | singleLineCommentChar+

  singleLineCommentChar = 
    | ~lineTerminator sourceCharacter

  commonToken = 
    | identifierName
    | punctuator
    | numericLiteral
    | stringLiteral
    | template

  identifierName = 
    | identifierName identifierPart -- alt2
    | identifierStart -- alt1

  identifierStart = 
    | unicodeIDStart -- alt1
    | "$" -- alt2
    | "_" -- alt3
    | "\\" unicodeEscapeSequence -- alt4

  identifierPart = 
    | unicodeIDContinue -- alt1
    | "$" -- alt2
    | "_" -- alt3
    | "\\" unicodeEscapeSequence -- alt4
    

  unicodeIDStart = letter /* fixme */

  unicodeIDContinue = letter | digit /* fixme */

  reservedWord = 
    | keyword
    | futureReservedWord
    | nullLiteral
    | booleanLiteral

  keyword = instanceof | continue | debugger | function | extends | finally | default | typeof | export | return | switch | delete | import | break | catch | class | while | const | super | yield | throw | case | else | void | with | this | var | new | for | try | do | in | if

  futureReservedWord = implements | protected | interface | package | private | public | await | enum

  punctuator = ">>>=" | "===" | "!==" | ">>>" | " ::" | "<<=" | ">>=" | "<=" | ">=" | "==" | "!=" | "++" | "--" | "<<" | ">>" | "&&" | "||" | "+=" | "-=" | "*=" | "%=" | "&=" | "|=" | "^=" | "=>" | "{" | "}" | "(" | ")" | "[" | "]" | "." | #sc | "," | "<" | ">" | "+" | "-" | "*" | "%" | "&" | "|" | "^" | "!" | "~" | "?" | "="

  divPunctuator = "/=" | "/"

  rightBracePunctuator = ")"

  nullLiteral = 
    | null

  booleanLiteral = 
    | true
    | false

  numericLiteral = 
    | binaryIntegerLiteral
    | octalIntegerLiteral
    | hexIntegerLiteral
    | decimalLiteral

  decimalLiteral = 
    | decimalIntegerLiteral "." decimalDigits? exponentPart? -- alt1
    | "." decimalDigits exponentPart? -- alt2
    | decimalIntegerLiteral exponentPart? -- alt3

  decimalIntegerLiteral = 
    | "0" -- alt1
    | nonZeroDigit decimalDigits? -- alt2

  decimalDigits = 
    | decimalDigits decimalDigit -- alt2
    | decimalDigit -- alt1

  decimalDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

  nonZeroDigit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

  exponentPart = 
    | exponentIndicator signedInteger -- alt1

  exponentIndicator = "e" | "E"

  signedInteger = 
    | decimalDigits -- alt1
    | "+" decimalDigits -- alt2
    | "-" decimalDigits -- alt3

  binaryIntegerLiteral = 
    | "0b" binaryDigits -- alt1
    | "0B" binaryDigits -- alt2

  binaryDigits = 
    | binaryDigits binaryDigit -- alt2
    | binaryDigit -- alt1

  binaryDigit = "0" | "1"

  octalIntegerLiteral = 
    | "0o" octalDigits -- alt1
    | "0O" octalDigits -- alt2

  octalDigits = 
    | octalDigits octalDigit -- alt2
    | octalDigit -- alt1

  octalDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"

  hexIntegerLiteral = 
    | "0x" hexDigits -- alt1
    | "0X" hexDigits -- alt2

  hexDigits = 
    | hexDigits hexDigit -- alt2
    | hexDigit -- alt1

  hexDigit := "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

  stringLiteral = 
    | "\"" doubleStringCharacters? "\"" -- alt1
    | "'" singleStringCharacters? "'" -- alt2

  doubleStringCharacters = 
    | doubleStringCharacter+

  singleStringCharacters = 
    | singleStringCharacter+

  doubleStringCharacter = 
    | ~("\"" | "\\" | lineTerminator) sourceCharacter -- alt1
    | "\\" escapeSequence -- alt2
    | lineContinuation -- alt3

  singleStringCharacter = 
    | ~("'" | "\\" | lineTerminator) sourceCharacter -- alt1
    | "\\" escapeSequence -- alt2
    | lineContinuation -- alt3

  lineContinuation = 
    | "\\" lineTerminatorSequence -- alt1

  escapeSequence = 
    | characterEscapeSequence -- alt1
    | "0" ~decimalDigit -- alt2
    | hexEscapeSequence -- alt3
    | unicodeEscapeSequence -- alt4

  characterEscapeSequence = 
    | singleEscapeCharacter
    | nonEscapeCharacter

  singleEscapeCharacter = "\"" | "\\" | "'" | "b" | "f" | "n" | "r" | "t" | "v"

  nonEscapeCharacter = 
    | ~(escapeCharacter | lineTerminator) sourceCharacter

  escapeCharacter = 
    | singleEscapeCharacter
    | decimalDigit
    | "x"
    | "u"

  hexEscapeSequence = 
    | "x" hexDigit hexDigit -- alt1

  unicodeEscapeSequence = 
    | "u" hex4Digits -- alt1
    | "u{" hexDigits "}" -- alt2

  hex4Digits = 
    | hexDigit hexDigit hexDigit hexDigit -- alt1

  regularExpressionLiteral = 
    | "/" regularExpressionBody "/" regularExpressionFlags -- alt1

  regularExpressionBody = 
    | regularExpressionFirstChar regularExpressionChars -- alt1

  regularExpressionChars = 
    | regularExpressionChars regularExpressionChar -- alt2
    | /* empty */ -- alt1

  regularExpressionFirstChar = 
    | ~("*" | "\\" | "/" | "[") regularExpressionNonTerminator
    | regularExpressionBackslashSequence
    | regularExpressionClass

  regularExpressionChar = 
    | ~("\\" | "/" | "[") regularExpressionNonTerminator
    | regularExpressionBackslashSequence
    | regularExpressionClass

  regularExpressionBackslashSequence = 
    | "\\" regularExpressionNonTerminator -- alt1

  regularExpressionNonTerminator = 
    | ~lineTerminator sourceCharacter

  regularExpressionClass = 
    | "[" regularExpressionClassChars "]" -- alt1

  regularExpressionClassChars = 
    | regularExpressionClassChars regularExpressionClassChar -- alt2
    | /* empty */ -- alt1

  regularExpressionClassChar = 
    | ~("]" | "\\") regularExpressionNonTerminator
    | regularExpressionBackslashSequence

  regularExpressionFlags = 
    | regularExpressionFlags identifierPart -- alt2
    | /* empty */ -- alt1

  template = 
    | noSubstitutionTemplate
    | templateHead

  noSubstitutionTemplate = 
    | "`" templateCharacters? "`" -- alt1

  templateHead = 
    | "`" templateCharacters? "${" -- alt1

  templateSubstitutionTail = 
    | templateMiddle
    | templateTail

  templateMiddle = 
    | "}" templateCharacters? "${" -- alt1

  templateTail = 
    | "}" templateCharacters? "`" -- alt1

  templateCharacters = 
    | templateCharacter+

  templateCharacter = 
    | "$" ~"{" -- alt1
    | "\\" escapeSequence -- alt2
    | lineContinuation -- alt3
    | lineTerminatorSequence -- alt4
    | ~("`" | "\\" | "$" | lineTerminator) sourceCharacter -- alt5

  IdentifierReference<guardYield> = 
    | Identifier -- alt1
    | guardYield yield -- alt2

  BindingIdentifier<guardYield> = 
    | Identifier -- alt1
    | guardYield yield -- alt2

  LabelIdentifier<guardYield> = 
    | Identifier -- alt1
    | guardYield yield -- alt2

  Identifier = 
    | ~reservedWord identifierName

  PrimaryExpression<guardYield> = 
    | this
    | IdentifierReference<guardYield>
    | Literal
    | ArrayLiteral<guardYield>
    | ObjectLiteral<guardYield>
    | FunctionExpression
    | ClassExpression<guardYield>
    | GeneratorExpression
    | regularExpressionLiteral
    | TemplateLiteral<guardYield>
    | CoverParenthesizedExpressionAndArrowParameterList<guardYield>

  CoverParenthesizedExpressionAndArrowParameterList<guardYield> = 
    | "(" Expression<withIn, guardYield> ")" -- alt1
    | "(" ")" -- alt2
    | "(" "..." BindingIdentifier<guardYield> ")" -- alt3
    | "(" Expression<withIn, guardYield> "," "..." BindingIdentifier<guardYield> ")" -- alt4

  Literal = 
    | nullLiteral
    | booleanLiteral
    | numericLiteral
    | stringLiteral

  ArrayLiteral<guardYield> = 
    | "[" Elision? "]" -- alt1
    | "[" ElementList<guardYield> "]" -- alt2
    | "[" ElementList<guardYield> "," Elision? "]" -- alt3

  ElementList<guardYield> = 
    | ElementList<guardYield> "," Elision? AssignmentExpression<withIn, guardYield> -- alt3
    | ElementList<guardYield> "," Elision? SpreadElement<guardYield> -- alt4
    | Elision? AssignmentExpression<withIn, guardYield> -- alt1
    | Elision? SpreadElement<guardYield> -- alt2

  Elision = 
    | Elision "," -- alt2
    | "," -- alt1

  SpreadElement<guardYield> = 
    | "..." AssignmentExpression<withIn, guardYield> -- alt1

  ObjectLiteral<guardYield> = 
    | "{" "}" -- alt1
    | "{" PropertyDefinitionList<guardYield> "}" -- alt2
    | "{" PropertyDefinitionList<guardYield> "," "}" -- alt3

  PropertyDefinitionList<guardYield> = 
    | PropertyDefinitionList<guardYield> "," PropertyDefinition<guardYield> -- alt2
    | PropertyDefinition<guardYield> -- alt1

  PropertyDefinition<guardYield> = 
    | MethodDefinition<guardYield> -- alt4
    | PropertyName<guardYield> ":" AssignmentExpression<withIn, guardYield> -- alt3
    | IdentifierReference<guardYield> -- alt1
    | CoverInitializedName<guardYield> -- alt2

  PropertyName<guardYield> = 
    | LiteralPropertyName
    | ComputedPropertyName<guardYield>

  LiteralPropertyName = 
    | identifierName
    | stringLiteral
    | numericLiteral

  ComputedPropertyName<guardYield> = 
    | "[" AssignmentExpression<withIn, guardYield> "]" -- alt1

  CoverInitializedName<guardYield> = 
    | IdentifierReference<guardYield> Initializer<withIn, guardYield> -- alt1

  Initializer<guardIn, guardYield> = 
    | "=" AssignmentExpression<guardIn, guardYield> -- alt1

  TemplateLiteral<guardYield> = 
    | noSubstitutionTemplate -- alt1
    | templateHead Expression<withIn, guardYield> TemplateSpans<guardYield> -- alt2

  TemplateSpans<guardYield> = 
    | templateTail -- alt1
    | TemplateMiddleList<guardYield> templateTail -- alt2

  TemplateMiddleList<guardYield> = 
    | TemplateMiddleList<guardYield> templateMiddle Expression<withIn, guardYield> -- alt2
    | templateMiddle Expression<withIn, guardYield> -- alt1

  MemberExpression<guardYield> = 
    | MemberExpression<guardYield> "[" Expression<withIn, guardYield> "]" -- alt2
    | MemberExpression<guardYield> "." identifierName -- alt3
    | MemberExpression<guardYield> TemplateLiteral<guardYield> -- alt4
    | new MemberExpression<guardYield> Arguments<guardYield> -- alt7
    | PrimaryExpression<guardYield> -- alt1
    | SuperProperty<guardYield> -- alt5
    | MetaProperty -- alt6

  SuperProperty<guardYield> = 
    | super "[" Expression<withIn, guardYield> "]" -- alt1
    | super "." identifierName -- alt2

  MetaProperty = 
    | NewTarget

  NewTarget = 
    | new "." "target" -- alt1

  NewExpression<guardYield> = 
    | MemberExpression<guardYield> -- alt1
    | new NewExpression<guardYield> -- alt2

  CallExpression<guardYield> = 
    | CallExpression<guardYield> Arguments<guardYield> -- alt3
    | CallExpression<guardYield> "[" Expression<withIn, guardYield> "]" -- alt4
    | CallExpression<guardYield> "." identifierName -- alt5
    | CallExpression<guardYield> TemplateLiteral<guardYield> -- alt6
    | MemberExpression<guardYield> Arguments<guardYield> -- alt1
    | SuperCall<guardYield> -- alt2

  SuperCall<guardYield> = 
    | super Arguments<guardYield> -- alt1

  Arguments<guardYield> = 
    | "(" ")" -- alt1
    | "(" ArgumentList<guardYield> ")" -- alt2

  ArgumentList<guardYield> = 
    | ArgumentList<guardYield> "," AssignmentExpression<withIn, guardYield> -- alt3
    | ArgumentList<guardYield> "," "..." AssignmentExpression<withIn, guardYield> -- alt4
    | AssignmentExpression<withIn, guardYield> -- alt1
    | "..." AssignmentExpression<withIn, guardYield> -- alt2

  LeftHandSideExpression<guardYield> = 
    | CallExpression<guardYield>
    | NewExpression<guardYield>

  PostfixExpression<guardYield> = 
    | LeftHandSideExpression<guardYield> ~lineTerminator "++" -- alt2
    | LeftHandSideExpression<guardYield> ~lineTerminator "--" -- alt3
    | LeftHandSideExpression<guardYield> -- alt1

  UnaryExpression<guardYield> = 
    | delete UnaryExpression<guardYield> -- alt2
    | void UnaryExpression<guardYield> -- alt3
    | typeof UnaryExpression<guardYield> -- alt4
    | "++" UnaryExpression<guardYield> -- alt5
    | "--" UnaryExpression<guardYield> -- alt6
    | "+" UnaryExpression<guardYield> -- alt7
    | "-" UnaryExpression<guardYield> -- alt8
    | "~" UnaryExpression<guardYield> -- alt9
    | "!" UnaryExpression<guardYield> -- alt10
    | PostfixExpression<guardYield> -- alt1

  MultiplicativeExpression<guardYield> = 
    | MultiplicativeExpression<guardYield> MultiplicativeOperator UnaryExpression<guardYield> -- alt2
    | UnaryExpression<guardYield> -- alt1

  MultiplicativeOperator = "*" | "/" | "%"

  AdditiveExpression<guardYield> = 
    | AdditiveExpression<guardYield> "+" MultiplicativeExpression<guardYield> -- alt2
    | AdditiveExpression<guardYield> "-" MultiplicativeExpression<guardYield> -- alt3
    | MultiplicativeExpression<guardYield> -- alt1

  ShiftExpression<guardYield> = 
    | ShiftExpression<guardYield> "<<" AdditiveExpression<guardYield> -- alt2
    | ShiftExpression<guardYield> ">>" AdditiveExpression<guardYield> -- alt3
    | ShiftExpression<guardYield> ">>>" AdditiveExpression<guardYield> -- alt4
    | AdditiveExpression<guardYield> -- alt1

  RelationalExpression<guardIn, guardYield> = 
    | RelationalExpression<guardIn, guardYield> "<" ShiftExpression<guardYield> -- alt2
    | RelationalExpression<guardIn, guardYield> ">" ShiftExpression<guardYield> -- alt3
    | RelationalExpression<guardIn, guardYield> "<=" ShiftExpression<guardYield> -- alt4
    | RelationalExpression<guardIn, guardYield> ">=" ShiftExpression<guardYield> -- alt5
    | RelationalExpression<guardIn, guardYield> instanceof ShiftExpression<guardYield> -- alt6
    | RelationalExpression<withIn, guardYield> guardIn in ShiftExpression<guardYield> -- alt7
    | ShiftExpression<guardYield> -- alt1

  EqualityExpression<guardIn, guardYield> = 
    | EqualityExpression<guardIn, guardYield> "==" RelationalExpression<guardIn, guardYield> -- alt2
    | EqualityExpression<guardIn, guardYield> "!=" RelationalExpression<guardIn, guardYield> -- alt3
    | EqualityExpression<guardIn, guardYield> "===" RelationalExpression<guardIn, guardYield> -- alt4
    | EqualityExpression<guardIn, guardYield> "!==" RelationalExpression<guardIn, guardYield> -- alt5
    | RelationalExpression<guardIn, guardYield> -- alt1

  BitwiseANDExpression<guardIn, guardYield> = 
    | BitwiseANDExpression<guardIn, guardYield> "&" EqualityExpression<guardIn, guardYield> -- alt2
    | EqualityExpression<guardIn, guardYield> -- alt1

  BitwiseXORExpression<guardIn, guardYield> = 
    | BitwiseXORExpression<guardIn, guardYield> "^" BitwiseANDExpression<guardIn, guardYield> -- alt2
    | BitwiseANDExpression<guardIn, guardYield> -- alt1

  BitwiseORExpression<guardIn, guardYield> = 
    | BitwiseORExpression<guardIn, guardYield> "|" BitwiseXORExpression<guardIn, guardYield> -- alt2
    | BitwiseXORExpression<guardIn, guardYield> -- alt1

  LogicalANDExpression<guardIn, guardYield> = 
    | LogicalANDExpression<guardIn, guardYield> "&&" BitwiseORExpression<guardIn, guardYield> -- alt2
    | BitwiseORExpression<guardIn, guardYield> -- alt1

  LogicalORExpression<guardIn, guardYield> = 
    | LogicalORExpression<guardIn, guardYield> "||" LogicalANDExpression<guardIn, guardYield> -- alt2
    | LogicalANDExpression<guardIn, guardYield> -- alt1

  ConditionalExpression<guardIn, guardYield> = 
    | LogicalORExpression<guardIn, guardYield> "?" AssignmentExpression<withIn, guardYield> ":" AssignmentExpression<guardIn, guardYield> -- alt2
    | LogicalORExpression<guardIn, guardYield> -- alt1

  AssignmentExpression<guardIn, guardYield> = 
    | ArrowFunction<guardIn, guardYield> -- alt3
    | LeftHandSideExpression<guardYield> "=" AssignmentExpression<guardIn, guardYield> -- alt4
    | LeftHandSideExpression<guardYield> AssignmentOperator AssignmentExpression<guardIn, guardYield> -- alt5
    | ConditionalExpression<guardIn, guardYield> -- alt1
    | guardYield YieldExpression<guardIn> -- alt2

  AssignmentOperator = ">>>=" | "<<=" | ">>=" | "*=" | "/=" | "%=" | "+=" | "-=" | "&=" | "^=" | "|="

  Expression<guardIn, guardYield> = 
    | Expression<guardIn, guardYield> "," AssignmentExpression<guardIn, guardYield> -- alt2
    | AssignmentExpression<guardIn, guardYield> -- alt1

  Statement<guardYield, guardReturn> = 
    | BlockStatement<guardYield, guardReturn> -- alt1
    | VariableStatement<guardYield> -- alt2
    | EmptyStatement -- alt3
    | ExpressionStatement<guardYield> -- alt4
    | IfStatement<guardYield, guardReturn> -- alt5
    | BreakableStatement<guardYield, guardReturn> -- alt6
    | ContinueStatement<guardYield> -- alt7
    | BreakStatement<guardYield> -- alt8
    | guardReturn ReturnStatement<guardYield> -- alt9
    | WithStatement<guardYield, guardReturn> -- alt10
    | LabelledStatement<guardYield, guardReturn> -- alt11
    | ThrowStatement<guardYield> -- alt12
    | TryStatement<guardYield, guardReturn> -- alt13
    | DebuggerStatement -- alt14

  Declaration<guardYield> = 
    | HoistableDeclaration<guardYield, noDefault>
    | ClassDeclaration<guardYield, noDefault>
    | LexicalDeclaration<withIn, guardYield>

  HoistableDeclaration<guardYield, guardDefault> = 
    | FunctionDeclaration<guardYield, guardDefault>
    | GeneratorDeclaration<guardYield, guardDefault>

  BreakableStatement<guardYield, guardReturn> = 
    | IterationStatement<guardYield, guardReturn>
    | SwitchStatement<guardYield, guardReturn>

  BlockStatement<guardYield, guardReturn> = 
    | Block<guardYield, guardReturn>

  Block<guardYield, guardReturn> = 
    | "{" StatementList<guardYield, guardReturn>? "}" -- alt1

  StatementList<guardYield, guardReturn> = 
    | StatementListItem<guardYield, guardReturn>+

  StatementListItem<guardYield, guardReturn> = 
    | Statement<guardYield, guardReturn>
    | Declaration<guardYield>

  LexicalDeclaration<guardIn, guardYield> = 
    | LetOrConst BindingList<guardIn, guardYield> #sc -- alt1

  LetOrConst = 
    | "let"
    | const

  BindingList<guardIn, guardYield> = 
    | BindingList<guardIn, guardYield> "," LexicalBinding<guardIn, guardYield> -- alt2
    | LexicalBinding<guardIn, guardYield> -- alt1

  LexicalBinding<guardIn, guardYield> = 
    | BindingIdentifier<guardYield> Initializer<guardIn, guardYield>? -- alt1
    | BindingPattern<guardYield> Initializer<guardIn, guardYield> -- alt2

  VariableStatement<guardYield> = 
    | var VariableDeclarationList<withIn, guardYield> #sc -- alt1

  VariableDeclarationList<guardIn, guardYield> = 
    | VariableDeclarationList<guardIn, guardYield> "," VariableDeclaration<guardIn, guardYield> -- alt2
    | VariableDeclaration<guardIn, guardYield> -- alt1

  VariableDeclaration<guardIn, guardYield> = 
    | BindingIdentifier<guardYield> Initializer<guardIn, guardYield>? -- alt1
    | BindingPattern<guardYield> Initializer<guardIn, guardYield> -- alt2

  BindingPattern<guardYield> = 
    | ObjectBindingPattern<guardYield>
    | ArrayBindingPattern<guardYield>

  ObjectBindingPattern<guardYield> = 
    | "{" "}" -- alt1
    | "{" BindingPropertyList<guardYield> "}" -- alt2
    | "{" BindingPropertyList<guardYield> "," "}" -- alt3

  ArrayBindingPattern<guardYield> = 
    | "[" Elision? BindingRestElement<guardYield>? "]" -- alt1
    | "[" BindingElementList<guardYield> "]" -- alt2
    | "[" BindingElementList<guardYield> "," Elision? BindingRestElement<guardYield>? "]" -- alt3

  BindingPropertyList<guardYield> = 
    | BindingPropertyList<guardYield> "," BindingProperty<guardYield> -- alt2
    | BindingProperty<guardYield> -- alt1

  BindingElementList<guardYield> = 
    | BindingElementList<guardYield> "," BindingElisionElement<guardYield> -- alt2
    | BindingElisionElement<guardYield> -- alt1

  BindingElisionElement<guardYield> = 
    | Elision? BindingElement<guardYield> -- alt1

  BindingProperty<guardYield> = 
    | SingleNameBinding<guardYield> -- alt1
    | PropertyName<guardYield> ":" BindingElement<guardYield> -- alt2

  BindingElement<guardYield> = 
    | SingleNameBinding<guardYield> -- alt1
    | BindingPattern<guardYield> Initializer<withIn, guardYield>? -- alt2

  SingleNameBinding<guardYield> = 
    | BindingIdentifier<guardYield> Initializer<withIn, guardYield>? -- alt1

  BindingRestElement<guardYield> = 
    | "..." BindingIdentifier<guardYield> -- alt1

  EmptyStatement = ";" // note: this semicolon eats newlines

  ExpressionStatement<guardYield> = 
    | ~("{" | "function" | "class" | ("let" "[")) Expression<withIn, guardYield> #sc -- alt1

  IfStatement<guardYield, guardReturn> = 
    | if "(" Expression<withIn, guardYield> ")" Statement<guardYield, guardReturn> else Statement<guardYield, guardReturn> -- alt1
    | if "(" Expression<withIn, guardYield> ")" Statement<guardYield, guardReturn> -- alt2

  IterationStatement<guardYield, guardReturn> = 
    | do Statement<guardYield, guardReturn> while "(" Expression<withIn, guardYield> ")" #sc -- alt1
    | while "(" Expression<withIn, guardYield> ")" Statement<guardYield, guardReturn> -- alt2
    | for "(" ~(("let" "[")) Expression<noIn, guardYield>? #sc Expression<withIn, guardYield>? #sc Expression<withIn, guardYield>? ")" Statement<guardYield, guardReturn> -- alt3
    | for "(" var VariableDeclarationList<noIn, guardYield> #sc Expression<withIn, guardYield>? #sc Expression<withIn, guardYield>? ")" Statement<guardYield, guardReturn> -- alt4
    | for "(" LexicalDeclaration<noIn, guardYield> Expression<withIn, guardYield>? #sc Expression<withIn, guardYield>? ")" Statement<guardYield, guardReturn> -- alt5
    | for "(" ~(("let" "[")) LeftHandSideExpression<guardYield> in Expression<withIn, guardYield> ")" Statement<guardYield, guardReturn> -- alt6
    | for "(" var ForBinding<guardYield> in Expression<withIn, guardYield> ")" Statement<guardYield, guardReturn> -- alt7
    | for "(" ForDeclaration<guardYield> in Expression<withIn, guardYield> ")" Statement<guardYield, guardReturn> -- alt8
    | for "(" ~"let" LeftHandSideExpression<guardYield> "of" AssignmentExpression<withIn, guardYield> ")" Statement<guardYield, guardReturn> -- alt9
    | for "(" var ForBinding<guardYield> "of" AssignmentExpression<withIn, guardYield> ")" Statement<guardYield, guardReturn> -- alt10
    | for "(" ForDeclaration<guardYield> "of" AssignmentExpression<withIn, guardYield> ")" Statement<guardYield, guardReturn> -- alt11

  ForDeclaration<guardYield> = 
    | LetOrConst ForBinding<guardYield> -- alt1

  ForBinding<guardYield> = 
    | BindingIdentifier<guardYield>
    | BindingPattern<guardYield>

  ContinueStatement<guardYield> = 
    | continue #sc -- alt1
    | continue ~lineTerminator LabelIdentifier<guardYield> #sc -- alt2

  BreakStatement<guardYield> = 
    | break #sc -- alt1
    | break ~lineTerminator LabelIdentifier<guardYield> #sc -- alt2

  ReturnStatement<guardYield> = 
    | return #sc -- alt1
    | return ~lineTerminator Expression<withIn, guardYield> #sc -- alt2

  WithStatement<guardYield, guardReturn> = 
    | with "(" Expression<withIn, guardYield> ")" Statement<guardYield, guardReturn> -- alt1

  SwitchStatement<guardYield, guardReturn> = 
    | switch "(" Expression<withIn, guardYield> ")" CaseBlock<guardYield, guardReturn> -- alt1

  CaseBlock<guardYield, guardReturn> = 
    | "{" CaseClauses<guardYield, guardReturn>? "}" -- alt1
    | "{" CaseClauses<guardYield, guardReturn>? DefaultClause<guardYield, guardReturn> CaseClauses<guardYield, guardReturn>? "}" -- alt2

  CaseClauses<guardYield, guardReturn> = 
    | CaseClauses<guardYield, guardReturn> CaseClause<guardYield, guardReturn> -- alt2
    | CaseClause<guardYield, guardReturn> -- alt1

  CaseClause<guardYield, guardReturn> = 
    | case Expression<withIn, guardYield> ":" StatementList<guardYield, guardReturn>? -- alt1

  DefaultClause<guardYield, guardReturn> = 
    | default ":" StatementList<guardYield, guardReturn>? -- alt1

  LabelledStatement<guardYield, guardReturn> = 
    | LabelIdentifier<guardYield> ":" LabelledItem<guardYield, guardReturn> -- alt1

  LabelledItem<guardYield, guardReturn> = 
    | Statement<guardYield, guardReturn>
    | FunctionDeclaration<guardYield, noDefault>

  ThrowStatement<guardYield> = 
    | throw ~lineTerminator Expression<withIn, guardYield> #sc -- alt1

  TryStatement<guardYield, guardReturn> = 
    | try Block<guardYield, guardReturn> Catch<guardYield, guardReturn> -- alt1
    | try Block<guardYield, guardReturn> Finally<guardYield, guardReturn> -- alt2
    | try Block<guardYield, guardReturn> Catch<guardYield, guardReturn> Finally<guardYield, guardReturn> -- alt3

  Catch<guardYield, guardReturn> = 
    | catch "(" CatchParameter<guardYield> ")" Block<guardYield, guardReturn> -- alt1

  Finally<guardYield, guardReturn> = 
    | finally Block<guardYield, guardReturn> -- alt1

  CatchParameter<guardYield> = 
    | BindingIdentifier<guardYield>
    | BindingPattern<guardYield>

  DebuggerStatement = 
    | debugger #sc -- alt1

  FunctionDeclaration<guardYield, guardDefault> = 
    | function BindingIdentifier<guardYield> "(" FormalParameters<noYield> ")" "{" FunctionBody<noYield> "}" -- alt1
    | guardDefault function "(" FormalParameters<noYield> ")" "{" FunctionBody<noYield> "}" -- alt2

  FunctionExpression = 
    | function BindingIdentifier<noYield>? "(" FormalParameters<noYield> ")" "{" FunctionBody<noYield> "}" -- alt1

  StrictFormalParameters<guardYield> = 
    | FormalParameters<guardYield>

  FormalParameters<guardYield> = 
    | FormalParameterList<guardYield> -- alt2
    | /* empty */ -- alt1

  FormalParameterList<guardYield> = 
    | FunctionRestParameter<guardYield> -- alt1
    | FormalsList<guardYield> "," FunctionRestParameter<guardYield> -- alt3
    | FormalsList<guardYield> -- alt2

  FormalsList<guardYield> = 
    | FormalsList<guardYield> "," FormalParameter<guardYield> -- alt2
    | FormalParameter<guardYield> -- alt1

  FunctionRestParameter<guardYield> = 
    | BindingRestElement<guardYield>

  FormalParameter<guardYield> = 
    | BindingElement<guardYield>

  FunctionBody<guardYield> = 
    | FunctionStatementList<guardYield>

  FunctionStatementList<guardYield> = 
    | StatementList<guardYield, withReturn>?

  ArrowFunction<guardIn, guardYield> = 
    | ArrowParameters<guardYield> ~lineTerminator "=>" ConciseBody<guardIn> -- alt1

  ArrowParameters<guardYield> = 
    | BindingIdentifier<guardYield>
    | CoverParenthesizedExpressionAndArrowParameterList<guardYield>

  ConciseBody<guardIn> = 
    | ~"{" AssignmentExpression<guardIn, noYield> -- alt1
    | "{" FunctionBody<noYield> "}" -- alt2

  MethodDefinition<guardYield> = 
    | PropertyName<guardYield> "(" StrictFormalParameters<noYield> ")" "{" FunctionBody<noYield> "}" -- alt1
    | GeneratorMethod<guardYield> -- alt2
    | "get" PropertyName<guardYield> "(" ")" "{" FunctionBody<noYield> "}" -- alt3
    | "set" PropertyName<guardYield> "(" PropertySetParameterList ")" "{" FunctionBody<noYield> "}" -- alt4

  PropertySetParameterList = 
    | FormalParameter<noYield>

  GeneratorMethod<guardYield> = 
    | "*" PropertyName<guardYield> "(" StrictFormalParameters<withYield> ")" "{" GeneratorBody "}" -- alt1

  GeneratorDeclaration<guardYield, guardDefault> = 
    | function "*" BindingIdentifier<guardYield> "(" FormalParameters<withYield> ")" "{" GeneratorBody "}" -- alt1
    | guardDefault function "*" "(" FormalParameters<withYield> ")" "{" GeneratorBody "}" -- alt2

  GeneratorExpression = 
    | function "*" BindingIdentifier<withYield>? "(" FormalParameters<withYield> ")" "{" GeneratorBody "}" -- alt1

  GeneratorBody = 
    | FunctionBody<withYield>

  YieldExpression<guardIn> = 
    | yield -- alt1
    | yield ~lineTerminator AssignmentExpression<guardIn, withYield> -- alt2
    | yield ~lineTerminator "*" AssignmentExpression<guardIn, withYield> -- alt3

  ClassDeclaration<guardYield, guardDefault> = 
    | class BindingIdentifier<guardYield> ClassTail<guardYield> -- alt1
    | guardDefault class ClassTail<guardYield> -- alt2

  ClassExpression<guardYield> = 
    | class BindingIdentifier<guardYield>? ClassTail<guardYield> -- alt1

  ClassTail<guardYield> = 
    | ClassHeritage<guardYield>? "{" ClassBody<guardYield>? "}" -- alt1

  ClassHeritage<guardYield> = 
    | extends LeftHandSideExpression<guardYield> -- alt1

  ClassBody<guardYield> = 
    | ClassElementList<guardYield>

  ClassElementList<guardYield> = 
    | ClassElementList<guardYield> ClassElement<guardYield> -- alt2
    | ClassElement<guardYield> -- alt1

  ClassElement<guardYield> = 
    | MethodDefinition<guardYield> -- alt1
    | "static" MethodDefinition<guardYield> -- alt2
    | #sc -- alt3

  Script = 
    | ScriptBody?

  ScriptBody = 
    | StatementList<noYield, noReturn>

  Module = 
    | ModuleBody?

  ModuleBody = 
    | ModuleItemList

  ModuleItemList = 
    | ModuleItem+

  ModuleItem = 
    | ImportDeclaration
    | ExportDeclaration
    | StatementListItem<noYield, noReturn>

  ImportDeclaration = 
    | import ImportClause FromClause #sc -- alt1
    | import ModuleSpecifier #sc -- alt2

  ImportClause = 
    | ImportedDefaultBinding -- alt1
    | NameSpaceImport -- alt2
    | NamedImports -- alt3
    | ImportedDefaultBinding "," NameSpaceImport -- alt4
    | ImportedDefaultBinding "," NamedImports -- alt5

  ImportedDefaultBinding = 
    | ImportedBinding

  NameSpaceImport = 
    | "*" "as" ImportedBinding -- alt1

  NamedImports = 
    | "{" "}" -- alt1
    | "{" ImportsList "}" -- alt2
    | "{" ImportsList "," "}" -- alt3

  FromClause = 
    | "from" ModuleSpecifier -- alt1

  ImportsList = 
    | ImportsList "," ImportSpecifier -- alt2
    | ImportSpecifier -- alt1

  ImportSpecifier = 
    | ImportedBinding -- alt1
    | identifierName "as" ImportedBinding -- alt2

  ModuleSpecifier = 
    | stringLiteral

  ImportedBinding = 
    | BindingIdentifier<noYield>

  ExportDeclaration = 
    | export "*" FromClause #sc -- alt1
    | export ExportClause FromClause #sc -- alt2
    | export ExportClause #sc -- alt3
    | export VariableStatement<noYield> -- alt4
    | export Declaration<noYield> -- alt5
    | export default HoistableDeclaration<noYield, withDefault> -- alt6
    | export default ClassDeclaration<noYield, withDefault> -- alt7
    | export default ~("function" | "class") AssignmentExpression<withIn, noYield> #sc -- alt8

  ExportClause = 
    | "{" "}" -- alt1
    | "{" ExportsList "}" -- alt2
    | "{" ExportsList "," "}" -- alt3

  ExportsList = 
    | ExportsList "," ExportSpecifier -- alt2
    | ExportSpecifier -- alt1

  ExportSpecifier = 
    | identifierName -- alt1
    | identifierName "as" identifierName -- alt2

  withYield = /* fixme */

  noYield = ~any /* is this right? */

  withIn = /* fixme */

  noIn = ~any /* is this right? */

  withReturn = /* fixme */

  noReturn = ~any /* is this right? */

  withDefault = /* fixme */

  noDefault = ~any /* is this right? */

  break = "break" ~identifierPart
  do = "do" ~identifierPart
  in = "in" ~identifierPart
  typeof = "typeof" ~identifierPart
  case = "case" ~identifierPart
  else = "else" ~identifierPart
  instanceof = "instanceof" ~identifierPart
  var = "var" ~identifierPart
  catch = "catch" ~identifierPart
  export = "export" ~identifierPart
  new = "new" ~identifierPart
  void = "void" ~identifierPart
  class = "class" ~identifierPart
  extends = "extends" ~identifierPart
  return = "return" ~identifierPart
  while = "while" ~identifierPart
  const = "const" ~identifierPart
  finally = "finally" ~identifierPart
  super = "super" ~identifierPart
  with = "with" ~identifierPart
  continue = "continue" ~identifierPart
  for = "for" ~identifierPart
  switch = "switch" ~identifierPart
  yield = "yield" ~identifierPart
  debugger = "debugger" ~identifierPart
  function = "function" ~identifierPart
  this = "this" ~identifierPart
  default = "default" ~identifierPart
  if = "if" ~identifierPart
  throw = "throw" ~identifierPart
  delete = "delete" ~identifierPart
  import = "import" ~identifierPart
  try = "try" ~identifierPart
  enum = "enum" ~identifierPart
  await = "await" ~identifierPart
  implements = "implements" ~identifierPart
  package = "package" ~identifierPart
  protected = "protected" ~identifierPart
  interface = "interface" ~identifierPart
  private = "private" ~identifierPart
  public = "public" ~identifierPart
  null = "null" ~identifierPart
  true = "true" ~identifierPart
  false = "false" ~identifierPart
}
